{
	"info": {
		"_postman_id": "ef2f658d-18af-4099-8682-d55c569ddfa3",
		"name": "Bookstore API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16159119",
		"_collection_link": "https://bold-resonance-989172.postman.co/workspace/API-Testing-Demo~9096919c-2acb-412f-bf45-d72ef9003534/collection/16159119-ef2f658d-18af-4099-8682-d55c569ddfa3?action=share&source=collection_link&creator=16159119"
	},
	"item": [
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for success code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"//Set userID in evnironment variables\r",
							"pm.environment.set(\"userID\", response.userID);\r",
							"//Log the generation of userID\r",
							"console.log(\"UserID stored: \", response.userID);\r",
							"\r",
							"pm.execution.setNextRequest(\"Generate Token\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random username and password using built-in variables\r",
							"let randomUsername = pm.variables.replaceIn(\"Agha Khan\");\r",
							"let randomPassword = pm.variables.replaceIn(\"{{$randomPassword}}@!\");\r",
							"\r",
							"// Store them in environment variables\r",
							"pm.environment.set(\"randomUsername\", randomUsername);\r",
							"pm.environment.set(\"randomPassword\", randomPassword);\r",
							"\r",
							"// Log for debugging\r",
							"console.log(\"Generated Username:\", randomUsername);\r",
							"console.log(\"Generated Password:\", randomPassword);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{randomUsername}}\",\r\n  \"password\": \"{{randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/Account/v1/User",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for success code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Parse the response body as JSON\r",
							"let responseJson = pm.response.json();\r",
							"// Extract the token from the response\r",
							"let token = responseJson.token;\r",
							"// Store the token in the environment variable\r",
							"pm.environment.set(\"JWT\", token);\r",
							"// Log for debugging\r",
							"console.log(\"Token Stored:\", token);\r",
							"\r",
							"pm.execution.setNextRequest(\"Get All Book lists\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{randomUsername}}\",\r\n  \"password\": \"{{randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/Account/v1/GenerateToken",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Book lists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for success code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response body as JSON\r",
							"let responseJson = pm.response.json();\r",
							"// Extract the second book's ISBN\r",
							"let isbnCode = responseJson.books[1].isbn; // Access the ISBN of the second book\r",
							"// Store the ISBN in an environment variable\r",
							"pm.environment.set(\"isbnCode\", isbnCode);\r",
							"// Log for debugging\r",
							"console.log(\"Second ISBN Stored:\", isbnCode);\r",
							"\r",
							"pm.execution.setNextRequest(\"Add Books to User\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/BookStore/v1/Books",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Books to User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(\"Check for successful addition of book into the user\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{isbnCode}}\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/BookStore/v1/Books",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check for successful addition of book into the user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check the status code for success\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Check the existance of some important data field\r",
							"pm.test(\"Response has the required fields - userId, username, and books\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.userId).to.exist;\r",
							"    pm.expect(responseData.username).to.exist;\r",
							"    pm.expect(responseData.books).to.exist;\r",
							"});\r",
							"\r",
							"//Check whether there is content in the book array\r",
							"pm.test(\"Books array should exist and be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.books).to.be.an('array');\r",
							"});\r",
							"//Check whether the response is being given in JSON format\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(\"Delete the books from User\");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/Account/v1/User/{{userID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the books from User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(\"Check for book deletion success from user\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/BookStore/v1/Books?UserId={{userID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					],
					"query": [
						{
							"key": "UserId",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check for book deletion success from user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check for success response status\r",
							"pm.test(\"Check for success response\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Check for an empty book array\r",
							"pm.test(\"Books array should be empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.books).to.be.an('array').that.is.empty;\r",
							"});\r",
							"pm.execution.setNextRequest(\"Delete the user\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/Account/v1/User/{{userID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check for success response\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.execution.setNextRequest(\"Check for user deletion success\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/Account/v1/User/{{userID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check for user deletion success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check for success response\r",
							"pm.test(\"The user became unauthorized\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/Account/v1/User/{{userID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	]
}